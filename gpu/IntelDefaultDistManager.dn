component provides gpu.ComputeDistributionManager requires gpu.ComputeManager,
                                                            gpu.Compute,
                                                            data.adt.List,
                                                            data.adt.HashTable,
                                                            data.adt.Queue,
                                                            data.IntUtil iu,
                                                            io.Output out,
                                                            data.StringUtil su
                                                            {

    ComputeManager hardwareInfo
    Compute nat

    List asynchQueues
    List synchQueues

    String physicalDevices[]
    HashTable physicalDevicesIDs

    ComputeDistributionManager:ComputeDistributionManager(store ComputeManager physicalCompute, store Compute nativeCompute) {
        hardwareInfo = physicalCompute
        nat = nativeCompute

        asynchQueues = new List()
        synchQueues = new List()

        physicalDevices = hardwareInfo.getComputeDevices()
        int deviceIDs[] = hardwareInfo.getComputeDeviceIDs()

        //Search for device names starting with 'Intel'
        bool hits[] = new bool[physicalDevices.arrayLength]
        int hitCount = 0
        for (int i = 0; i < physicalDevices.arrayLength; i++) {
            hits[i] = su.startsWith(physicalDevices[i].string, "Intel")
            hitCount+=hits[i]
        }
        int deviceIDsKeep[] = new int[hitCount]
        String physicalDevicesKeep[] = new String[hitCount]
        int k = 0
        for (int i = 0; i < hitCount; i++) {
            bool next = false
            while (next == false) {
                next = hits[k]
                k++
            }
            deviceIDsKeep[i] = deviceIDs[k-1]
            physicalDevicesKeep[i] = physicalDevices[k-1]
        }

        deviceIDs = deviceIDsKeep
        physicalDevices = physicalDevicesKeep

        physicalDevicesIDs = new HashTable()

        //map device names and device IDs
        for (int i = 0; i < deviceIDs.arrayLength; i++) {
            ChandleWrapper hand = new ChandleWrapper(deviceIDs[i])
            out.println(physicalDevices[i].string)
            physicalDevicesIDs.put(physicalDevices[i].string, hand) 
            ChandleWrapper e = physicalDevicesIDs.get(physicalDevices[i].string)
            int x = e.handle
        }

        //create opencl context with all devices available
        nat.createContext_w(deviceIDs)

        //create one queue per physicalDevice
        for (int i = 0; i < deviceIDs.arrayLength; i++) {
            int queue_cl = nat.createSynchQueue_w(deviceIDs[i])
            ComputeQueue newQ = new ComputeQueue(queue_cl, new Queue(), physicalDevices[i], deviceIDs[i])
            synchQueues.add(newQ)
        }
    }

    HashTableItem[] ComputeDistributionManager:getReadWriteQueues(store HashTable rw[]) {
        HashTableItem devicesMap[] = physicalDevicesIDs.getContents()
        return devicesMap
    }

    HashTableItem ComputeDistributionManager:mallocWhichDevice() {
        HashTableItem keyValue = new HashTableItem()
        keyValue.key = physicalDevices[0].string
        keyValue.value = physicalDevicesIDs.get(physicalDevices[0].string)
        return keyValue
    }

    ComputeQueue getQueueByDevice(int device) {
        for (int i = 0; i < synchQueues.getLength(); i++) {
            ComputeQueue q = synchQueues.getIndex(i)
            if (q.physicalDeviceID == device) {
                return q
            }
        }
        return null
    }

    void ComputeDistributionManager:execProgram(ChandleWrapperArray kernelHandles, HashTable memoryObjects, int outputDims[]) {
        HashTableItem memObjs[] = memoryObjects.getContents()

        ChandleWrapper kernelHandlesArr[] = kernelHandles.array
        int rawKerHandles[] = new int[kernelHandlesArr.arrayLength]
        bool kerPrepSuccess[] = new bool[kernelHandlesArr.arrayLength]

        for (int i = 0; i < rawKerHandles.arrayLength; i++) {
            rawKerHandles[i] = kernelHandlesArr[i].handle
            if (rawKerHandles[i] != 0) {
                kerPrepSuccess[i] = true
            }
            else {
                kerPrepSuccess[i] = false
            }
        }

        int succCount = 0 
        int kerIndex = 0
        int kerToExec = 0
        for (int k = 0; k < kerPrepSuccess.arrayLength; k++) {
            if (kerPrepSuccess[k]) {
                succCount += 1
                kerIndex = k
            }
        }
        if (succCount == 1) {
            kerToExec = rawKerHandles[kerIndex]
            String device = memObjs[0].value
            ChandleWrapper devIdWrap = physicalDevicesIDs.get(device.string)
            int dev = devIdWrap.handle
            ComputeQueue q = getQueueByDevice(dev)
            nat.runKernel_w(kerToExec, q.queue_cl, outputDims)
        }
        else if (succCount == 0) {

        }
        else { //succCount > 1
            kerToExec = rawKerHandles[kerIndex]
            String device = memObjs[0].value
            ChandleWrapper devIdWrap = physicalDevicesIDs.get(device.string)
            int dev = devIdWrap.handle
            ComputeQueue q = getQueueByDevice(dev)
            nat.runKernel_w(kerToExec, q.queue_cl, outputDims)
        }
        return
    }

}
