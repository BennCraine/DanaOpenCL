component provides gpu.ComputeDistributionManager requires gpu.ComputeStats,
                                                            gpu.Compute,
                                                            data.adt.List,
                                                            data.adt.HashTable,
                                                            data.adt.Queue,
                                                            data.IntUtil iu,
                                                            io.Output out,
                                                            data.StringUtil su
                                                            {

    ComputeStats hardwareInfo
    Compute nat

    List asynchQueues
    List synchQueues

    String physicalDevices[]
    HashTable physicalDevicesIDs

    ComputeDistributionManager:ComputeDistributionManager(store ComputeStats physicalCompute, store Compute nativeCompute) {
        hardwareInfo = physicalCompute
        nat = nativeCompute

        asynchQueues = new List()
        synchQueues = new List()

        physicalDevices = hardwareInfo.getComputeDevices()
        int deviceIDs[] = hardwareInfo.getComputeDeviceIDs()

        physicalDevicesIDs = new HashTable()

        //grab the first available device
        ChandleWrapper handle = new ChandleWrapper(deviceIDs[0])
        physicalDevicesIDs.put(physicalDevices[0].string, handle)

        nat.createContext_w(deviceIDs[0])

        //create one queue per physicalDevice
        int queue_cl = nat.createSynchQueue_w(deviceIDs[0])
        ComputeQueue newQ = new ComputeQueue(queue_cl, new Queue(), physicalDevices[0], deviceIDs[0])
        synchQueues.add(newQ)
    }

    HashTableItem[] ComputeDistributionManager:getReadWriteQueues(store HashTable rw[]) {
        HashTableItem devicesMap[] = physicalDevicesIDs.getContents()
        return devicesMap
    }

    HashTableItem ComputeDistributionManager:mallocWhichDevice() {
        HashTableItem keyValue = new HashTableItem()
        keyValue.key = physicalDevices[0].string
        keyValue.value = physicalDevicesIDs.get(physicalDevices[0].string)
        return keyValue
    }

    ComputeQueue getQueueByDevice(int device) {
        for (int i = 0; i < synchQueues.getLength(); i++) {
            ComputeQueue q = synchQueues.getIndex(i)
            if (q.physicalDeviceID == device) {
                return q
            }
        }
        return null
    }

    void ComputeDistributionManager:execProgram(ChandleWrapperArray kernelHandles, HashTable memoryObjects, int outputDims[]) {
        HashTableItem memObjs[] = memoryObjects.getContents()

        ChandleWrapper kernelHandlesArr[] = kernelHandles.array
        int rawKerHandles[] = new int[kernelHandlesArr.arrayLength]
        bool kerPrepSuccess[] = new bool[kernelHandlesArr.arrayLength]

        for (int i = 0; i < rawKerHandles.arrayLength; i++) {
            rawKerHandles[i] = kernelHandlesArr[i].handle
            if (rawKerHandles[i] != 0) {
                kerPrepSuccess[i] = true
            }
            else {
                kerPrepSuccess[i] = false
            }
        }

        int succCount = 0 
        int kerIndex = 0
        int kerToExec = 0
        for (int k = 0; k < kerPrepSuccess.arrayLength; k++) {
            if (kerPrepSuccess[k]) {
                succCount += 1
                kerIndex = k
            }
        }
        if (succCount == 1) {
            kerToExec = rawKerHandles[kerIndex]
            String device = memObjs[0].value
            ChandleWrapper devIdWrap = physicalDevicesIDs.get(device.string)
            int dev = devIdWrap.handle
            ComputeQueue q = getQueueByDevice(dev)
            nat.runKernel_w(kerToExec, q.queue_cl, outputDims)
        }
        else if (succCount == 0) {

        }
        else { //succCount > 1
            kerToExec = rawKerHandles[kerIndex]
            String device = memObjs[0].value
            ChandleWrapper devIdWrap = physicalDevicesIDs.get(device.string)
            int dev = devIdWrap.handle
            ComputeQueue q = getQueueByDevice(dev)
            nat.runKernel_w(kerToExec, q.queue_cl, outputDims)
        }
        return
    }

}

