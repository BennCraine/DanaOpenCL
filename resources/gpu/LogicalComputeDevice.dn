uses data.String

/*
    {"description" : "Interface that provides a high level abstraction available to the caller to enable them to use compute devices on the system that are not the host device"}
*/
interface LogicalComputeDevice {

    /* {"@description" : "Contructor, allows the implimenting component to initilise the LogicalComputeDevice with programs and data it will need to operate"} */
    LogicalComputeDevice()

    /* {"@description" : "Creates a 1-D buffer with 'length' cells on some compute device available to the system. The user of this interface will use the given 'name' parameter to access this buffer so they should track the name appropriatly"} */
    void createIntArray(char name[], int length)

    /* {"@description" : "Creates a n-D (n = 'dim') buffer with a size equal to the product of the values given by 'lengths' on some compute device available to the system. The user of this interface will use the given 'name' parameter to access this buffer so they should track the name appropriatly"} */
    void createIntMatrix(char name[], int rows, int cols)

    /* {"@description" : "Writes either the fvales or the ivalues to the 1-D buffer refered to by 'name'"} */
    void writeIntArray(char name[], int values[])
    /* {"@description" : "Reads the values from the 1-D buffer refered to by 'name'. The result of the read operation will be stored in one of the fields of the returned Vector structure"} */
    int[] readIntArray(char name[])

    /* {"@description" : "Writes either the fvales or the ivalues to the n-D buffer refered to by 'name'"} */
    void writeIntMatrix(char name[], int values[][])

    /* {"@description" : "Reads the values from the n-D buffer refered to by 'name'. The result of the read operation will be stored in one of the fields of the returned Matrix structure"} */
    int[][] readIntMatrix(char name[])

    /* {"@description" : "Creates a 1-D buffer with 'length' cells on some compute device available to the system. The user of this interface will use the given 'name' parameter to access this buffer so they should track the name appropriatly"} */
    void createDecArray(char name[], int length)

    /* {"@description" : "Creates a n-D (n = 'dim') buffer with a size equal to the product of the values given by 'lengths' on some compute device available to the system. The user of this interface will use the given 'name' parameter to access this buffer so they should track the name appropriatly"} */
    void createDecMatrix(char name[], int rows, int cols)

    /* {"@description" : "Writes either the fvales or the ivalues to the 1-D buffer refered to by 'name'"} */
    void writeDecArray(char name[], dec values[])
    /* {"@description" : "Reads the values from the 1-D buffer refered to by 'name'. The result of the read operation will be stored in one of the fields of the returned Vector structure"} */
    dec[] readDecArray(char name[])

    /* {"@description" : "Writes either the fvales or the ivalues to the n-D buffer refered to by 'name'"} */
    void writeDecMatrix(char name[], dec values[][])

    /* {"@description" : "Reads the values from the n-D buffer refered to by 'name'. The result of the read operation will be stored in one of the fields of the returned Matrix structure"} */
    dec[][] readDecMatrix(char name[])

    void destroyMemoryArea(char name[])

    /* {"@description" : "Gives this LogicalComputeDevice the ability to execute the source code in the file given by 'path'. The 'name' parameter will be used as the first parameter of the 'runProgram' function of this interface"} */
    void loadProgram(char path[], char name[])

    /* {"@description" : "Returns the names of all programs loaded onto this LogicalComputeDevice"} */
    String[] getPrograms()

    /* {"@description" : "Attempts to run the program refered to by the first parameter, using the values 'params' as arguments for the program being run. 'params' should be a set of strings that match names of buffers that have been created on the LogicalComputeDevice"} */
    void runProgram(char program[], String params[])

}
