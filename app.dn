component provides App requires gpu.LogicalComputeDevice, data.adt.List, io.Output out, data.IntUtil iu {

    int App:main(AppParam params[]) {
        LogicalComputeDevice myDevice = new LogicalComputeDevice()

        myDevice.loadProgram("/home/ben/Documents/PhD/DanaOpenCL/resources-ext/opencl_kernels/vadd2.cl", "vadd")
        myDevice.createArray("A", 1, 5)
        myDevice.createArray("B", 1, 5)
        myDevice.createArray("C", 1, 5)

        int vecOne[] = new int[5]
        int vecTwo[] = new int[5]
        for (int i =0; i < 5;i++) {
            vecOne[i] = 5
            vecTwo[i] = 0
        }
        myDevice.writeArray("A", null, vecOne)
        myDevice.writeArray("B", null, vecOne)
        myDevice.writeArray("C", null, vecTwo)

        String paramss[] = new String[3]
        paramss[0] = new String("A")
        paramss[1] = new String("B")
        paramss[2] = new String("C")

        myDevice.runProgram("vadd", paramss, new List())

        int result[] = myDevice.readArray("C")

        for (int i =0; i < 5;i++) {
            out.println("$(iu.makeString(result[i]))")
        }

        int dims[] = new int[2]
        dims[0] = 7
        dims[1] = 8
        myDevice.createMatrix("M", 0, 2, dims)
        int values[][] = new int[7][8]
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 8; j++) {
                values[i][j] = 10
            }
        }
        myDevice.writeMatrix("M", null, values)
        int newValues[][] = myDevice.readMatrix("M")
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 8; j++) {
                out.print("$(iu.makeString(newValues[i][j]))|")
            }
            out.print("\n")
        }
        return 0
    }

}
